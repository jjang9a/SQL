SELECT *
FROM employees e, departments d --1) 카테시안 프로덕트 발생 -> 모든 데이터 결과물을 출력 한 다음
WHERE e.department_id = d.department_id; --2) WHERE절의 조건에 맞는 데이터만 추출 한다

--OUTER JOIN

SELECT *
FROM departments LEFT OUTER JOIN employees
ON (departments.department_id = employees.department_id) --1) JOIN할 때 해당 조건에 맞는 데이터만 가지고 와서 데이터 추출
WHERE departments.department_id > 50;  --2) 부서번호가 50번보다 큰 부서에 대해서만 데이터 추출

--JOIN과 ON은 한 세트
SELECT *
FROM employees e LEFT OUTER JOIN departments d
ON e.department_id = d.department_id;

--OURTER JOIN
--모든 사원들이 일하는 부서를 출력
--ANSI (공통) 문법
SELECT e.employee_id, e.last_name, e.department_id, d.department_name
FROM employees e LEFT OUTER JOIN departments d
ON (e.department_id = d.department_id);
--ORACLE 문법
SELECT e.employee_id, e.last_name, e.department_id, d.department_name
FROM employees e, departments d
WHERE e.department_id = d.department_id(+);

--각 부서마다 근무하는 직원들을 출력
SELECT e.employee_id, e.last_name, e.department_id, d.department_name
FROM employees e RIGHT OUTER JOIN departments d
ON (e.department_id = d.department_id);

SELECT e.employee_id, e.last_name, e.department_id, d.department_name
FROM employees e, departments d
WHERE e.department_id(+) = d.department_id;


--SELF JOIN
--나를 관리해줄 사람이 있어야지만 그 사람을 출력
SELECT e.employee_id, e.last_name, e.manager_id, m.last_name
FROM employees e JOIN employees m
ON (e.manager_id = m.employee_id);
--모든 사람들에 대해 관리해줄 사람을 출력(없으면 null로 출력)
SELECT e.employee_id, e.last_name, e.manager_id, m.last_name
FROM employees e LEFT OUTER JOIN employees m
ON (e.manager_id = m.employee_id);

--CROSS JOIN
SELECT last_name, department_name
FROM employees CROSS JOIN departments;

--NATURAL JOIN ( 단점 : 같은 col이 존재해야지만 사용 가능)
SELECT *
FROM departments;
SELECT *
FROM locations;
SELECT department_id, department_name, location_id, city
FROM departments NATURAL JOIN locations;

SELECT employee_id, department_name, department_id, last_name
FROM employees NATURAL JOIN departments;

--USING절
SELECT employee_id, department_name, department_id, last_name
FROM employees JOIN departments
--employees.department_id = departments.department_id 와 같은 의미
USING (department_id);

--ON
--같은 열이 둘 다 있는 경우 어디에서 들고와야할지가 불명확하므로 정확히 명시해주어야 함
SELECT employee_id, department_name, employees.department_id, last_name
FROM employees JOIN departments
ON(employees.department_id = departments.department_id);

--테이블의 이름 별칭 사용
SELECT employee_id, department_name, e.department_id, last_name
FROM employees e JOIN departments d
ON(e.department_id = d.department_id);

--3 WAY JOIN
--EQUI JOIN이용
SELECT e.employee_id, e.last_name, d.department_id, l.city
FROM employees e JOIN departments d ON(e.department_id = d.department_id)
                            JOIN locations l ON (d.location_id = l.location_id);
                            
--OUTER JOIN이용
SELECT e.employee_id, e.last_name, d.department_id, l.city
FROM employees e FULL OUTER JOIN departments d ON(e.department_id = d.department_id)
                            JOIN locations l ON (d.location_id = l.location_id);
                            
--JOIN과 GROUP함수의 콜라보

SELECT d.department_name, MIN(e.salary), MAX(e.salary), TRUNC(AVG(e.salary))
FROM employees e JOIN departments d
ON (e.department_id = d.department_id)
GROUP BY d.department_name;

--SUBQUERY
--'Abel'이라는 이름의 사원보다 급여가 많은 사람의 사원정보를 출력하세요
SELECT salary
FROM employees
WHERE last_name = 'Abel';

SELECT *
FROM employees
WHERE salary > 11000;

SELECT *
FROM employees
WHERE salary > (
                        SELECT salary
                        FROM employees
                        WHERE last_name = 'Abel'
                        );
                        
--조건이 두 개 인 서브쿼리
--'Matos'라는 이름의 사원과 직책(직업)이 같고 연봉은 높은 사람의 정보를 출력하세요
SELECT job_id
FROM employees
WHERE last_name = 'Matos';

SELECT salary
FROM employees
WHERE last_name = 'Matos';

SELECT last_name, job_id, salary
FROM employees
WHERE job_id = 'ST_CLERK' AND salary > 2600;

SELECT last_name, job_id, salary
FROM employees
WHERE job_id = (
                        SELECT job_id
                        FROM employees
                        WHERE last_name = 'Matos';
                        )
AND salary > (
                        SELECT last_name, job_id, salary
                        FROM employees
                        WHERE job_id = 'ST_CLERK' AND salary > 2600;
                        );
                        
--회사에서 급여가 제일 높은 사람의 정보 출력
SELECT last_name, job_id, salary
FROM employees
WHERE salary = (
                        SELECT MAX(salary)
                        FROM employees
                        );

--20번 부서보다 인원이 많은 부서의 정보를 출력
SELECT COUNT(*)
FROM employees
WHERE department_id = 20;

SELECT department_id, COUNT(*)
FROM employees
GROUP BY department_id
HAVING COUNT(*) > (
                                SELECT COUNT(*)
                                FROM employees
                                WHERE department_id = 20
                                );

--60번 부서의 최고급여와 같은 급여를 받는 사람의 정보를 출력
SELECT *
FROM employees
WHERE salary = (
                        SELECT MAX(salary)
                        FROM employees
                        WHERE department_id = 60
                        );
                        
--오류
SELECT *
FROM employees
WHERE salary = (
                        SELECT salary + 100
                        FROM employees
                        );
                        
--부서별 최고 급여를 받는 사람과 같은 급여를 받는 사람의 정보를  출려ㅓㄱ
SELECT MAX(salary)
FROM employees
GROUP BY department_id;

SELECT last_name, job_id, salary
FROM employees
WHERE salary IN ( --IN은 OR와 같은 개념
                        SELECT MAX(salary)
                        FROM employees
                        GROUP BY department_id
                        );
                        
--ANY
--60번 부서 구성원의 급여보다 많은 사람들의 정보 출력
SELECT salary
FROM employees
WHERE department_id = 60;

SELECT last_name, job_id, salary
FROM employees
WHERE salary > ANY ( --OR의 성격을 가짐 // 최소값인 4200보다 큰 salary는 조건에 만족
                        SELECT salary
                        FROM employees
                        WHERE department_id = 60
                        );
                        
SELECT last_name, job_id, salary
FROM employees
WHERE salary > ALL ( --AND의 성격을 가짐 // 최대값인 9000보다 큰 salary만 조건에 만족
                        SELECT salary
                        FROM employees
                        WHERE department_id = 60
                        );
                        
--쌍비교
SELECT last_name, salary, commission_pct, department_id
FROM employees
WHERE (salary, NVL(commission_pct, -1)) IN (
                                                                SELECT salary, NVL(commission_pct, -1)
                                                                FROM employees
                                                                WHERE department_id = 60)
AND department_id <> 60;

--비쌍비교
SELECT last_name, salary, commission_pct, department_id
FROM employees
WHERE salary IN (
                           SELECT salary
                           FROM employees
                           WHERE department_id = 60)
AND NVL(commission_pct, -1) IN (
                                                  SELECT NVL(commission_pct, -1)
                                                  FROM employees
                                                  WHERE department_id = 60)
AND department_id <> 60;

--주의사항
SELECT last_name, job_id, salary
FROM employees
WHERE salary > (
                        SELECT salary
                        FROM employees
                        WHERE last_name = 'Mark'
                        );
 
                        
SELECT employee_id, last_name
FROM employees
WHERE employee_id IN (
                                    SELECT manager_id
                                    FROM employees
                                    );

SELECT employee_id, last_name
FROM employees
WHERE employee_id NOT IN (
                                    SELECT manager_id
                                    FROM employees
                                    );   
                                    